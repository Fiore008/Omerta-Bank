import tkinter as tk
from tkinter import messagebox

class OmertaBank:
    def __init__(self, root):
        self.saldo_iniziale = 1500  
        self.saldo = self.saldo_iniziale
        self.movimenti = []

        root.title("Omertà Bank")
        root.geometry("600x500")
        root.configure(bg="#f1f1f1")

        self.title_label = tk.Label(root, text="Omertà Bank", font=("Arial", 24, "bold"), bg="#f1f1f1", fg="#6b4e17")
        self.title_label.pack(pady=10)

        self.saldo_label = tk.Label(root, text=f"Saldo Totale: {self.saldo:.2f} €", font=("Arial", 16), bg="#f1f1f1")
        self.saldo_label.pack(pady=10)

        self.input_frame = tk.Frame(root, bg="#f1f1f1")
        self.input_frame.pack(pady=20)

        self.importo_label = tk.Label(self.input_frame, text="Importo:", bg="#f1f1f1")
        self.importo_label.grid(row=0, column=0, padx=5)
        self.importo_entry = tk.Entry(self.input_frame)
        self.importo_entry.grid(row=0, column=1, padx=5)

        self.motivazione_label = tk.Label(self.input_frame, text="Motivazione:", bg="#f1f1f1")
        self.motivazione_label.grid(row=1, column=0, padx=5)
        self.motivazione_entry = tk.Entry(self.input_frame)
        self.motivazione_entry.grid(row=1, column=1, padx=5)

        self.entrata_button = tk.Button(self.input_frame, text="Entrata", bg="#6b4e17", fg="white", command=self.aggiungi_entrata)
        self.entrata_button.grid(row=2, column=0, pady=10)

        self.uscita_button = tk.Button(self.input_frame, text="Uscita", bg="#6b4e17", fg="white", command=self.aggiungi_uscita)
        self.uscita_button.grid(row=2, column=1, pady=10)

        self.movimenti_frame = tk.Frame(root, bg="#f1f1f1")
        self.movimenti_frame.pack(pady=20, fill="both", expand=True)

        self.movimenti_label = tk.Label(self.movimenti_frame, text="Cronologia Transazioni:", bg="#f1f1f1", font=("Arial", 14))
        self.movimenti_label.pack(anchor="w", padx=10)

        self.movimenti_listbox = tk.Listbox(self.movimenti_frame, height=10, width=60)
        self.movimenti_listbox.pack(padx=10, pady=10)

        self.reset_button = tk.Button(root, text="Reset", bg="#6b4e17", fg="white", command=self.reset_saldo)
        self.reset_button.pack(pady=10)

        self.start_timer()

    def aggiorna_saldo(self):
        self.saldo_label.config(text=f"Saldo Totale: {self.saldo:.2f} €")

    def aggiungi_movimento(self, tipo, importo, motivazione):
        movimento = f"{tipo}: {importo:.2f} € - {motivazione}"
        self.movimenti.append(movimento)
        self.movimenti_listbox.insert(tk.END, movimento)

    def aggiungi_entrata(self):
        try:
            importo = float(self.importo_entry.get())
            motivazione = self.motivazione_entry.get().strip()
            if importo <= 0:
                raise ValueError("Importo deve essere positivo.")
            if not motivazione:
                raise ValueError("La motivazione non può essere vuota.")
            self.saldo += importo
            self.aggiorna_saldo()
            self.aggiungi_movimento("Entrata", importo, motivazione)
            self.importo_entry.delete(0, tk.END)
            self.motivazione_entry.delete(0, tk.END)
        except ValueError as e:
            messagebox.showerror("Errore", str(e))

    def aggiungi_uscita(self):
        try:
            importo = float(self.importo_entry.get())
            motivazione = self.motivazione_entry.get().strip()
            if importo <= 0:
                raise ValueError("Importo deve essere positivo.")
            if importo > self.saldo:
                raise ValueError("Saldo insufficiente!")
            if not motivazione:
                raise ValueError("La motivazione non può essere vuota.")
            self.saldo -= importo
            self.aggiorna_saldo()
            self.aggiungi_movimento("Uscita", importo, motivazione)
            self.importo_entry.delete(0, tk.END)
            self.motivazione_entry.delete(0, tk.END)
        except ValueError as e:
            messagebox.showerror("Errore", str(e))

    def reset_saldo(self):
        self.saldo = self.saldo_iniziale
        self.movimenti.clear()
        self.movimenti_listbox.delete(0, tk.END)
        self.aggiorna_saldo()
        messagebox.showinfo("Reset", "Il saldo è stato resettato a 1500 € e i movimenti sono stati eliminati.")

    def entrata_automatica(self):
        importo = 1500
        motivazione = "Stipendio e rapine riuscite"
        self.saldo += importo
        self.aggiungi_movimento("Entrata Automatica", importo, motivazione)
        self.aggiorna_saldo()

    def start_timer(self):
        self.entrata_automatica()
        root.after(300000, self.start_timer)  

if __name__ == "__main__":
    root = tk.Tk()
    app = OmertaBank(root)
    root.mainloop()
